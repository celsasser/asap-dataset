---
title: "DATA 607: Final Project Presentation"
subtitle: "Analysis of Scores and Performances (ASAP)"
author: "Curtis Elsasser"
date: "12/15/2024"
echo: false
width: 1050
height: 900
max-scale: 1.25
smaller: true
theme: solarized
format:
  revealjs:
    css: "607-styles.css"
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| warning: false
source("wrangle.R")
library(kableExtra)

# note: load_manifest() sorts by `year_midlife`
list_manifest <- load_manifest()
list_scores_music <- load_music(list_manifest$scores)
```

## Overview

Music is a mystery. We can easily appreciate it without understanding it, but I believe that understanding it can deepen our appreciation. I have always wanted to view music through the lens of a computer. This project is my first data science step in that direction.

:::{.notes}
- Love
- Budding data scientist and I love data
- Find patterns
- Enhance appreciation.
- Wanted to do this for a long time.
:::

## The Data

Source: Aligned Scores and Performances ([ASAP](https://github.com/celsasser/asap-dataset)) dataset.

The Music: <https://github.com/celsasser/asap-dataset>

- The hierarchy is generally: `<composer>/<collection>/<content>`. There are exceptions. The foolproof way to navigate the hiearchy is through what I call the "manifest", but is actually called [metadata.csv](https://github.com/celsasser/asap-dataset/blob/main/metadata.csv).

The Wrangler: <https://github.com/celsasser/asap-dataset/tree/main/Elsasser/assembler>

- Parses MIDI files into CSVs: one CSV file for every score, and one CSV file for every performance.
- Updates [metadata.csv](https://github.com/celsasser/asap-dataset/blob/main/metadata.csv) with CSV paths, performer names, and composer birth and death years.
- Calculates some simple metrics such as [density](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/src/metrics.ts#L15) and [interval](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/src/metrics.ts#L40).

Data Analysis: <https://github.com/celsasser/asap-dataset/tree/main/Elsasser/analysis>

- A wrangler, [wrangle.R](https://github.com/celsasser/asap-dataset/tree/main/Elsasser/analysis/wrangle.R), that loads and processes data.
- This presentation lives there.
- Includes [EDA](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/analysis/explore.qmd). More E than DA.

## The Data's Residents

:::{.font-size-three-quarters}
| Composers | MIDI Performances | MIDI Scores | CSV Performances | CSV Scores |
|---------------|:----------:|:-------:|:----------:|:-------:|
| **Bach**         | 169       | 59    | 169       | 59    |
| **Balakirev**    | 10        | 1     | 10        | 1     |
| **Beethoven**    | 271       | 57    | 271       | 57    |
| **Brahms**       | 1         | 1     | 1         | 1     |
| **Chopin**       | 289       | 34    | 289       | 34    |
| **Debussy**      | 3         | 2     | 3         | 2     |
| **Glinka**       | 2         | 1     | 2         | 1     |
| **Haydn**        | 44        | 11    | 44        | 11    |
| **Liszt**        | 121       | 16    | 121       | 16    |
| **Mozart**       | 16        | 6     | 16        | 6     |
| **Prokofiev**    | 8         | 1     | 8         | 1     |
| **Rachmaninoff** | 8         | 4     | 8         | 4     |
| **Ravel**        | 22        | 4     | 22        | 4     |
| **Schubert**     | 62        | 13    | 62        | 13    |
| **Schumann**     | 28        | 10    | 28        | 10    |
| **Scriabin**     | 13        | 2     | 13        | 2     |
| **Total**        | 1067      | 222   | 1067      | 222   |
:::

## Scores vs. Performances

Performances and scores are very closely related, but they are not the same. The score is the composition as written by the composer. The performance is the composition as played by the performer. Classical music is a very structured genre, but the performance of it is very expressive. It's very difficult to reproduce it in it's entirety with metadata such as dynamics. Where the tempo, key-signature and time-signature are meaningful in the score, they are meaningless in the performances in this repository. Simply, the score is the blueprint, the performance is the building.

## Wrangling
The [wrangler](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/) is a command line application written in Typescript. It supports three [commands](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/src/index.ts):

:::{.incremental}
- MIDI file -> CSV file: `assembler file <path-MIDI> <path-CSV>`
- CSV manifest -> CSV files: `assembler list <path-CSV>`
- Dump a MIDI file: `assembler dump <path-MIDI>`
:::

### Why Typescript?

:::{.incremental}
* Because there exists a [MIDI parser](https://www.npmjs.com/package/midi-file-io) that I like to work with. 
* It doesn't presume anything. 
* It returns parsed data in a strongly typed [MidiIoSong](https://github.com/celsasser/midi-file-io/blob/HEAD/src/types.ts#L109) data structure.
:::

## Wide or Long?

I oscillated back and forth with this question:

- [Wide](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/src/file.ts#L306): It's tidy and bloated.
- [Narrow](https://github.com/celsasser/asap-dataset/blob/main/Elsasser/assembler/src/file.ts#L244): It's not tidy but it's lean.

I went mostly wide for two reasons:

:::{.incremental}
1. It's easier to process on the R side.
2. Most of the compositions are short. Volume wasn't a problem.
:::

## Schema: the Catalog

:::{.font-size-three-quarters}
| Column | Description | Type |
|------------------------|------------------------|------------------------|
| `id` | ID that identifies this composition | `string` |
| `composer` | Composer's last name | `string` |
| `year_born` | Composer's birth year (Wikipedia) | `integer` |
| `year_died` | Composer's death year (Wikipedia) | `integer` |
| `year_midlife` | Composer's halfway point (Wikipedia) | `integer` |
| `title` | Composition's title | `string` |
| `performer` | The performer. Extracted from `midi_performance` | `string` |
| `midi_score` | The composition's MIDI score file (relative path) | `string` |
| `midi_performance` | The composition's MIDI performance file (relative path) | `string` |
| `csv_score` | The score's CSV (relative path) | `string` |
| `csv_performance` | The performance's CSV (relative path) | `string` |
:::

## Schema: the Score/Performance

:::{.font-size-three-quarters}
| Column | Description | Type |
|------------|---------------------------------|-------|
| `id` | composition ID | `integer` |
| `composer` | The composer of the piece | `string` |
| `year_born` | The composer's birth year (Wikipedia) | `integer` |
| `year_died` | The composer's death year (Wikipedia) | `integer` |
| `year_written` | This as an approximation that is accurate to half the composer's lifetime. | `integer` |
| `title` | The composition's title | `string` |
| `performer` | The performer. Extracted from `midi_performance`. `NA` for scores | `string`\|`NA` |
| `type` | The type of data: `note`, `ticks_per_quarter`, `tempo`, `key_signature`, `time_signature` | `string` |
| `time_offset` | The number of seconds from the beginning | `float` |
| `time_duration` | The duration in seconods | `float` |
| `tick_offset` | The number of MIDI ticks from the beginning | `integer` |
| `tick_duration` | The duration in MIDI ticks | `integer` |
| `note_midi` | The MIDI value of the note | `integer` |
| `note_normal` | The MIDI value normalized, \[0, 1\] | `integer` |
| `velocity` | The velocity of the note, \[0, 1\] | `integer` |
:::

## Schema: the Score/Performance (cont.)

:::{.font-size-three-quarters}
| Column | Description | Type |
|------------|---------------------------------|-------|
| `pretty` | The named representation of the note. Matches key-signature's spelling | `string` |
| `canonical` | The canonical representation of the note. We always use the flat equivalent | `string` |
| `density` | How dense notes are in the vicinity of this note. | `float` |
| `interval` | The interval between this note and the following note | `string` |
| `tempo` | The tempo of the current point in the piece | `integer` |
| `key_signature` | The key signature at this point in the piece | `string` |
| `time_signature` | The time signature at this point in the piece | `string` |
| `ticks_per_quarter` | The number of ticks in a quarter note | `integer` |
:::

## MIDI?

MIDI = Musical Instrument Digital Interface.

::: {columns}
::: {.column width="25%"}
![](./res/robot-03.png){height="250px"}
:::

:::: {.column width="75%"}
| Type             | Performer  | Media                            |
|------------------|------------|----------------------------------|
| Audio            | Elaine Lee | ![](./res/bwv848-lee-live.mp3)   |
| MIDI Performance | Elaine Lee | ![](./res/bwv848-lee-midi.mp3)   |
| MIDI Score       | NA         | ![](./res/bwv848-score-midi.mp3) |

::: font-size-three-quarters
The Well-Tempered Clavier I No. 3 in C-sharp major (BWV 848) by J.S. Bach
:::
:::
:::

## EDA

## Naughty or Nice

The Well-Tempered Clavier I No. 3 in C-sharp major

It is the most impossible key in the whole of the Wohltemperirte Clavier: C-sharp major. No fewer than seven sharps adorn the beginning of each staff. Furthermore, it is an unnecessarily complicated key, as instead of seven sharps you could use five flats to write exactly the same pitch – as D-flat major. In 1728, the music theorist Johann David Heinichen therefore classified C-sharp major as one of the ‘superfluous keys’. Here, Bach is deliberately toying with the mind of the keyboard player, as the instinctive correspondence between the black noteheads on the paper and the fingers on the keys no longer works.

[Patrick Ayrton](https://www.bachvereniging.nl/en/bwv/bwv-848)

## References
:::{.font-size-three-quarters}
- Aligned Scores and Performances (ASAP) dataset: <https://github.com/celsasser/asap-dataset>.
    - Wrangling: <https://github.com/celsasser/asap-dataset/tree/main/Elsasser/assembler>
    - Analysis: <https://github.com/celsasser/asap-dataset/tree/main/Elsasser/analysis>
- Aligned Scores and Performances (ASAP) dataset: <https://github.com/fosfrancesco/asap-dataset> whose authors are: Foscarin, Francesco and McLeod, Andrew and Rigaux, Philippe and Jacquemard, Florent and Sakai, Masahiko
- Elaine Lee, Bach Prelude and Fugue in C-Sharp Major BWV 848: <https://www.youtube.com/watch?v=kb97WGPz0So>
- The Well-Tempered Clavier I No. 3 in C-sharp major: <https://www.bachvereniging.nl/en/bwv/bwv-848>
:::
